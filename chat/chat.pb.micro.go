// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chat.proto

package chat

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ChatService service

func NewChatServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ChatService service

type ChatService interface {
	GetChannelMessages(ctx context.Context, in *GetChannelMessagesRequest, opts ...client.CallOption) (*GetChannelMessagesResponse, error)
	PostChannelMessage(ctx context.Context, in *PostChannelMessageRequest, opts ...client.CallOption) (*PostChannelMessageResponse, error)
	GetUserChannels(ctx context.Context, in *GetUserChannelsRequest, opts ...client.CallOption) (*GetUserChannelsResponse, error)
}

type chatService struct {
	c    client.Client
	name string
}

func NewChatService(name string, c client.Client) ChatService {
	return &chatService{
		c:    c,
		name: name,
	}
}

func (c *chatService) GetChannelMessages(ctx context.Context, in *GetChannelMessagesRequest, opts ...client.CallOption) (*GetChannelMessagesResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.GetChannelMessages", in)
	out := new(GetChannelMessagesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) PostChannelMessage(ctx context.Context, in *PostChannelMessageRequest, opts ...client.CallOption) (*PostChannelMessageResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.PostChannelMessage", in)
	out := new(PostChannelMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatService) GetUserChannels(ctx context.Context, in *GetUserChannelsRequest, opts ...client.CallOption) (*GetUserChannelsResponse, error) {
	req := c.c.NewRequest(c.name, "ChatService.GetUserChannels", in)
	out := new(GetUserChannelsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatService service

type ChatServiceHandler interface {
	GetChannelMessages(context.Context, *GetChannelMessagesRequest, *GetChannelMessagesResponse) error
	PostChannelMessage(context.Context, *PostChannelMessageRequest, *PostChannelMessageResponse) error
	GetUserChannels(context.Context, *GetUserChannelsRequest, *GetUserChannelsResponse) error
}

func RegisterChatServiceHandler(s server.Server, hdlr ChatServiceHandler, opts ...server.HandlerOption) error {
	type chatService interface {
		GetChannelMessages(ctx context.Context, in *GetChannelMessagesRequest, out *GetChannelMessagesResponse) error
		PostChannelMessage(ctx context.Context, in *PostChannelMessageRequest, out *PostChannelMessageResponse) error
		GetUserChannels(ctx context.Context, in *GetUserChannelsRequest, out *GetUserChannelsResponse) error
	}
	type ChatService struct {
		chatService
	}
	h := &chatServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ChatService{h}, opts...))
}

type chatServiceHandler struct {
	ChatServiceHandler
}

func (h *chatServiceHandler) GetChannelMessages(ctx context.Context, in *GetChannelMessagesRequest, out *GetChannelMessagesResponse) error {
	return h.ChatServiceHandler.GetChannelMessages(ctx, in, out)
}

func (h *chatServiceHandler) PostChannelMessage(ctx context.Context, in *PostChannelMessageRequest, out *PostChannelMessageResponse) error {
	return h.ChatServiceHandler.PostChannelMessage(ctx, in, out)
}

func (h *chatServiceHandler) GetUserChannels(ctx context.Context, in *GetUserChannelsRequest, out *GetUserChannelsResponse) error {
	return h.ChatServiceHandler.GetUserChannels(ctx, in, out)
}
