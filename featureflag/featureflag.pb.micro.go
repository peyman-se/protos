// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: featureflag.proto

package featureflag

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FeatureFlagService service

func NewFeatureFlagServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FeatureFlagService service

type FeatureFlagService interface {
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...client.CallOption) (*GetServicesResponse, error)
	GetClients(ctx context.Context, in *GetClientsRequest, opts ...client.CallOption) (*GetClientsResponse, error)
	GetFeatures(ctx context.Context, in *GetFeaturesRequest, opts ...client.CallOption) (*GetFeaturesResponse, error)
	ToggleFeature(ctx context.Context, in *ToggleFeatureRequest, opts ...client.CallOption) (*ToggleFeatureResponse, error)
}

type featureFlagService struct {
	c    client.Client
	name string
}

func NewFeatureFlagService(name string, c client.Client) FeatureFlagService {
	return &featureFlagService{
		c:    c,
		name: name,
	}
}

func (c *featureFlagService) GetServices(ctx context.Context, in *GetServicesRequest, opts ...client.CallOption) (*GetServicesResponse, error) {
	req := c.c.NewRequest(c.name, "FeatureFlagService.GetServices", in)
	out := new(GetServicesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagService) GetClients(ctx context.Context, in *GetClientsRequest, opts ...client.CallOption) (*GetClientsResponse, error) {
	req := c.c.NewRequest(c.name, "FeatureFlagService.GetClients", in)
	out := new(GetClientsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagService) GetFeatures(ctx context.Context, in *GetFeaturesRequest, opts ...client.CallOption) (*GetFeaturesResponse, error) {
	req := c.c.NewRequest(c.name, "FeatureFlagService.GetFeatures", in)
	out := new(GetFeaturesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagService) ToggleFeature(ctx context.Context, in *ToggleFeatureRequest, opts ...client.CallOption) (*ToggleFeatureResponse, error) {
	req := c.c.NewRequest(c.name, "FeatureFlagService.ToggleFeature", in)
	out := new(ToggleFeatureResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FeatureFlagService service

type FeatureFlagServiceHandler interface {
	GetServices(context.Context, *GetServicesRequest, *GetServicesResponse) error
	GetClients(context.Context, *GetClientsRequest, *GetClientsResponse) error
	GetFeatures(context.Context, *GetFeaturesRequest, *GetFeaturesResponse) error
	ToggleFeature(context.Context, *ToggleFeatureRequest, *ToggleFeatureResponse) error
}

func RegisterFeatureFlagServiceHandler(s server.Server, hdlr FeatureFlagServiceHandler, opts ...server.HandlerOption) error {
	type featureFlagService interface {
		GetServices(ctx context.Context, in *GetServicesRequest, out *GetServicesResponse) error
		GetClients(ctx context.Context, in *GetClientsRequest, out *GetClientsResponse) error
		GetFeatures(ctx context.Context, in *GetFeaturesRequest, out *GetFeaturesResponse) error
		ToggleFeature(ctx context.Context, in *ToggleFeatureRequest, out *ToggleFeatureResponse) error
	}
	type FeatureFlagService struct {
		featureFlagService
	}
	h := &featureFlagServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FeatureFlagService{h}, opts...))
}

type featureFlagServiceHandler struct {
	FeatureFlagServiceHandler
}

func (h *featureFlagServiceHandler) GetServices(ctx context.Context, in *GetServicesRequest, out *GetServicesResponse) error {
	return h.FeatureFlagServiceHandler.GetServices(ctx, in, out)
}

func (h *featureFlagServiceHandler) GetClients(ctx context.Context, in *GetClientsRequest, out *GetClientsResponse) error {
	return h.FeatureFlagServiceHandler.GetClients(ctx, in, out)
}

func (h *featureFlagServiceHandler) GetFeatures(ctx context.Context, in *GetFeaturesRequest, out *GetFeaturesResponse) error {
	return h.FeatureFlagServiceHandler.GetFeatures(ctx, in, out)
}

func (h *featureFlagServiceHandler) ToggleFeature(ctx context.Context, in *ToggleFeatureRequest, out *ToggleFeatureResponse) error {
	return h.FeatureFlagServiceHandler.ToggleFeature(ctx, in, out)
}
